suite: Regression Test Migration
templates:
  - hooks/migration-env.yaml
  - hooks/migration.yaml
release:
  name: ut
tests:
  - it: When given a secretProvider, should always render volumeMounts and volumes for them
    set:
      tyk.listenPath: /unit-test
      image.tag: pinned-version
      secretProvider.tenantId: 99330c76-81xxxx
      secretProvider.vaults.qa-app-common.AMQP_URL: RABBITMQ-ORANGE-WOLF-URL
      hooks.migration.enabled: true
    template: hooks/migration.yaml
    asserts:
      - isKind:
          of: Job

      # Check if the volumes array exists in the template
      - isNotNullOrEmpty:
          path: spec.template.spec.volumes

      # Check if the specific volume `db-migration-qa-app-common` exists
      - isNotNullOrEmpty:
          path: spec.template.spec.volumes[?(@.name == "ut-qa-app-common")]

      # Check if the container array exists
      - isNotNullOrEmpty:
          path: spec.template.spec.containers

      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")]

      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts

      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts[?(@.name == "ut-qa-app-common")]

      - equal:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts[?(@.name == "ut-qa-app-common")].mountPath
          value: "/mnt/ut-qa-app-common"

  - it: When given initContainers in migration
    set:
      tyk.listenPath: /unit-test
      image.tag: pinned-version
      hooks.migration.enabled: true
      hooks.migration.initContainers[0].command:
        - "sh"
        - "-e"
        - "echo"
        - "helloWorld"
    template: hooks/migration.yaml
    asserts:
      - isKind:
          of: Job
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[0]
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[?(@.name == "init-ut")]

  - it: When given envVars, renders them to the JobSpec
    set:
      tyk.listenPath: /unit-test
      image.tag: pinned-version
      hooks.migration.enabled: true
      envVars:
        - name: NAME_OF_ENV
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: ENV_VALUE
    template: hooks/migration.yaml
    asserts:
      - isKind:
          of: Job
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].env[?(@.name == "NAME_OF_ENV")]
      - contains:
          path: spec.template.spec.containers[?(@.name == "db-migration")].env
          content:
            name: NAME_OF_ENV
            valueFrom:
              secretKeyRef:
                key: ENV_VALUE
                name: my-secret
          count: 1
          any: true

  - it: When given an initContainer, should always render volumeMounts and volumes for them
    set:
      tyk.listenPath: /unit-test
      image.tag: pinned-version
      hooks.migration.enabled: true
      hooks.migration.initContainers[0]:
        volumeMounts:
          - name: data
            mountPath: /opt
            mountPathJob: /opt/folder
        command:
          - "sh"
          - "-e"
          - "echo"
          - "helloWorld"
        
    template: hooks/migration.yaml
    asserts:
      - isKind:
          of: Job
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[0]
      - isNotNullOrEmpty:
          path: spec.template.spec.initContainers[?(@.name == "init-ut")]
      - isNotNullOrEmpty:
          path: spec.template.spec.volumes[?(@.name == "data")]
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts[?(@.name == "data")]
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts[?(@.mountPath == "/opt/folder")]
      - isNotNullOrEmpty:
          path: spec.template.spec.containers[?(@.name == "db-migration")].volumeMounts[?(@.readOnly == false)]