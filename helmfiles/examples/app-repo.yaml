environments:
  your-tenant-alias:
    values:
      - ../defaults/01_system.defaults.yaml
      - ../defaults/30_app_repo.defaults.yaml
      - ./your-tenant-alias.yaml
---
releases:
  - name: image-pull-secret
    chart: ../../charts/image-pull-secret
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        secret:
          url: {{ .Values.appRepo._common.acr.url }}
          username: {{ .Values.appRepo._common.acr.username | fetchSecretValue | quote }}
          password: {{ .Values.appRepo._common.acr.password | fetchSecretValue | quote }}
  - name: node-app-repository
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.0
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.appRepo._common.acr.url }}/backend-service-app-repository
          tag: {{ .Values.appRepo._common.tenantReleaseOverrides.nodeAppRepository | default .Values.appRepo._common.defaultReleases.nodeAppRepository | quote }}
        replicaCount: {{ .Values.appRepo.nodeAppRepository | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8088
        env:
          AUDIT_LOG_DIR: /audit
          LOG_LEVEL: info
          MAX_HEAP_MB: {{ .Values.appRepo.nodeAppRepository.env.MAX_HEAP_MB }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote }}
          CORS_ALLOWED_ORIGINS: https://{{ .Values.host }}
        envSecrets:
          DATABASE_URL: "postgresql://{{ .Values.appRepo._common.database.username | fetchSecretValue }}:{{ .Values.appRepo._common.database.password | fetchSecretValue }}@{{ .Values.appRepo._common.database.host | fetchSecretValue }}/app-repository"
          ENCRYPTION_KEY: {{ .Values.appRepo.nodeAppRepository.secrets.ENCRYPTION_KEY | fetchSecretValue | quote }}
          AMQP_URL: amqp://{{ .Values.rabbitMQ.username | fetchSecretValue }}:{{ .Values.rabbitMQ.password | fetchSecretValue }}@rabbitmq-headless.system.svc.cluster.local:5672/%2f
          AZURE_SUBSCRIPTION_ID: {{ default "" .Values.appRepo.nodeAppRepository.secrets.AZURE_SUBSCRIPTION_ID | fetchSecretValue | quote }}
          AZURE_RESOURCE_GROUP: {{ default "" .Values.appRepo.nodeAppRepository.secrets.AZURE_RESOURCE_GROUP | fetchSecretValue | quote }}
          APP_LOGS_STORAGE_ACCOUNT: {{ default "" .Values.appRepo.nodeAppRepository.secrets.APP_LOGS_STORAGE_ACCOUNT | fetchSecretValue | quote }}
        securityContext:
          {{ .Values.appRepo._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.appRepo.nodeAppRepository.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        resources:
          {{ .Values.appRepo.nodeAppRepository.resources | toYaml | nindent 10 }}
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-app-repository; npx prisma migrate deploy
        serviceAccount:
          enabled: true
          workloadIdentity:
            enabled: true
            clientId: {{ default "" .Values.appRepo.nodeAppRepository.serviceAccount.workloadIdentity.clientId | fetchSecretValue | quote }}
        probes:
          enabled: false
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
  - name: node-webhook-scheduler
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.0
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.appRepo._common.acr.url }}/backend-service-webhook-scheduler
          tag: {{ .Values.appRepo._common.tenantReleaseOverrides.nodeWebhookScheduler | default .Values.appRepo._common.defaultReleases.nodeWebhookScheduler | quote }}
        replicaCount: {{ .Values.appRepo.nodeWebhookScheduler | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        env:
          LOG_LEVEL: info
          MAX_HEAP_MB: {{ .Values.appRepo.nodeWebhookScheduler.env.MAX_HEAP_MB }}
          APP_REPOSITORY_URL: http://node-app-repository.apps.svc.cluster.local:8088
        envSecrets:
          AMQP_URL: amqp://{{ .Values.rabbitMQ.username | fetchSecretValue }}:{{ .Values.rabbitMQ.password | fetchSecretValue }}@rabbitmq-headless.system.svc.cluster.local:5672/%2f
        securityContext:
          {{ .Values.appRepo._common.securityContext | toYaml | nindent 10 }}
        service:
          enabled: false
        resources:
          {{ .Values.appRepo.nodeWebhookScheduler.resources | toYaml | nindent 10 }}
        probes:
          enabled: false
  - name: node-webhook-worker
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.0
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.appRepo._common.acr.url }}/backend-service-webhook-worker
          tag: {{ .Values.appRepo._common.tenantReleaseOverrides.nodeWebhookWorker | default .Values.appRepo._common.defaultReleases.nodeWebhookWorker | quote }}
        replicaCount: {{ .Values.appRepo.nodeWebhookWorker | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        env:
          LOG_LEVEL: info
          MAX_HEAP_MB: {{ .Values.appRepo.nodeWebhookWorker.env.MAX_HEAP_MB }}
          APP_REPOSITORY_URL: http://node-app-repository.apps.svc.cluster.local:8088
        envSecrets:
          AMQP_URL: amqp://{{ .Values.rabbitMQ.username | fetchSecretValue }}:{{ .Values.rabbitMQ.password | fetchSecretValue }}@rabbitmq-headless.system.svc.cluster.local:5672/%2f
        securityContext:
          {{ .Values.appRepo._common.securityContext | toYaml | nindent 10 }}
        service:
          enabled: false
        resources:
          {{ .Values.appRepo.nodeWebhookWorker.resources | toYaml | nindent 10 }}
        probes:
          enabled: false
  - name: typescript-service-event-socket
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.0
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.appRepo._common.acr.url }}/backend-service-event-socket
          tag: {{ .Values.appRepo._common.tenantReleaseOverrides.typescriptServiceEventSocket | default .Values.appRepo._common.defaultReleases.typescriptServiceEventSocket | quote }}
        replicaCount: {{ .Values.appRepo.typescriptServiceEventSocket | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 5201
        env:
          LOG_LEVEL: info
          MAX_HEAP_MB: {{ .Values.appRepo.typescriptServiceEventSocket.env.MAX_HEAP_MB }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote }}
        envSecrets:
          AMQP_URL: amqp://{{ .Values.rabbitMQ.username | fetchSecretValue }}:{{ .Values.rabbitMQ.password | fetchSecretValue }}@rabbitmq-headless.system.svc.cluster.local:5672/%2f
        securityContext:
          {{ .Values.appRepo._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.appRepo.typescriptServiceEventSocket.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        resources:
          {{ .Values.appRepo.typescriptServiceEventSocket.resources | toYaml | nindent 10 }}
  - name: client-insights-exporter
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.0
    namespace: apps
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.appRepo._common.acr.url }}/backend-service-client-insights-exporter
          tag: {{ .Values.appRepo._common.tenantReleaseOverrides.clientInsightsExporter | default .Values.appRepo._common.defaultReleases.clientInsightsExporter | quote }}
        replicaCount: {{ .Values.appRepo.clientInsightsExporter | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        env:
          LOG_LEVEL: info
          MAX_HEAP_MB: {{ .Values.appRepo.clientInsightsExporter.env.MAX_HEAP_MB }}
          DATA_SOURCE_URLS: http://node-scope-management.chat.svc.cluster.local:8094/insights;http://node-chat.chat.svc.cluster.local:8093/insights
          CLIENT_INSIGHT_SERVER_URL: https://gateway.unique.app/insights/client-insights
          UNIQUE_INSTALLATION_ID: {{ .Values.host }}
        securityContext:
          {{ .Values.appRepo._common.securityContext | toYaml | nindent 10 }}
        service:
          enabled: false
        resources:
          {{ .Values.appRepo.clientInsightsExporter.resources | toYaml | nindent 10 }}
        deployment:
          enabled: false
        cronJob:
          enabled: {{ .Values.appRepo.clientInsightsExporter.cronJob.enabled | quote }}
          name: client-insights-exporter
          suspend: false
          schedule: "0 0 * * *"
          timeZone: Europe/Zurich
          concurrencyPolicy: Forbid
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 1
          startingDeadlineSeconds: 10
          jobTemplate:
            restartPolicy: Never
            containers:
              name: client-insights-exporter