environments:
  your-tenant-alias:
    values:
      - ../defaults/01_system.defaults.yaml
      - ../defaults/10_document_chat.defaults.yaml
      - ./your-tenant-alias.yaml
---
repositories:
  - name: qdrant
    url: https://qdrant.github.io/qdrant-helm
  - name: bedag
    url: https://bedag.github.io/helm-charts
  - name: zitadel
    url: https://charts.zitadel.com
releases:
  - name: image-pull-secret
    chart: ../../charts/image-pull-secret
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        secret:
          url: {{ .Values.chat._common.acr.url | quote }}
          username: {{ .Values.chat._common.acr.username | fetchSecretValue | quote }}
          password: {{ .Values.chat._common.acr.password | fetchSecretValue | quote }}
  - name: image-pull-secret-system
    chart: ../../charts/image-pull-secret
    namespace: system
    createNamespace: true
    wait: false
    values:
      -
        secret:
          url: {{ .Values.chat._common.acr.url | quote }}
          username: {{ .Values.chat._common.acr.username | fetchSecretValue | quote }}
          password: {{ .Values.chat._common.acr.password | fetchSecretValue | quote }}
  - name: qdrant-zrs
    chart: qdrant/qdrant
    version: {{ .Values.qdrant.chart.version }}
    namespace: chat
    createNamespace: true
    wait: false
    values:
      - image:
          tag: {{ .Values.qdrant.imageTag }}
        replicaCount: {{ .Values.qdrant | get "replicaCount" 2 }}
        resources:
          {{ .Values.qdrant.resources | toYaml | nindent 10 }}
        persistence:
          accessModes:
            - ReadWriteOnce
          size: {{ .Values.qdrant.persistence.size }}
          storageClassName: default-zrs
        startupProbe:
          enabled: true
          failureThreshold: 30 # we allow such a long startup time in case qdrant needs to rebuild its WAL table
          periodSeconds: {{ .Values.qdrant | get "probes.startup.periodSeconds" 15 }}
  - name: node-ingestion
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-ingestion
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nodeIngestion | default .Values.chat._common.defaultReleases.nodeIngestion | quote }}
        replicaCount: {{ .Values.chat.nodeIngestion | get "replicaCount" 2 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8091
        serviceAccount:
          enabled: true
          workloadIdentity:
            clientId: {{ .Values.chat.nodeIngestion.secrets.WORKLOAD_IDENTITY_CLIENT_ID | fetchSecretValue | quote }}
            enabled: true
        env:
          LOG_LEVEL: info
          AZURE_OPENAI_API_DEPLOYMENT_NAME: {{ .Values.chat.nodeIngestion.env.AZURE_OPENAI_API_DEPLOYMENT_NAME | quote }}
          AZURE_OPENAI_API_VERSION: {{ .Values.chat.nodeIngestion.env.AZURE_OPENAI_API_VERSION | quote }}
          TRUSTED_DOMAINS: {{ .Values.chat.nodeIngestion.env.TRUSTED_DOMAINS | quote }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote }}
          ZITADEL_ROOT_ORG_ID: {{ .Values.chat.nodeIngestion.env.ZITADEL_ROOT_ORG_ID | quote }}
          SCORE_THRESHOLD: "0"
          QDRANT_URL: http://qdrant-zrs-headless.chat.svc.cluster.local:6333
          SCOPE_MANAGEMENT_URL: http://node-scope-management.chat.svc.cluster.local:8094
          CHAT_URL: http://node-chat.chat.svc.cluster.local:8093
          AUDIT_LOG_DIR: /audit
          CORS_ALLOWED_ORIGINS: https://{{ .Values.host }}
          USE_SCOPE_MANAGEMENT: {{ .Values.chat.nodeIngestion.env.USE_SCOPE_MANAGEMENT | quote }}
          MAX_HEAP_MB: {{ .Values.chat.nodeIngestion.env.MAX_HEAP_MB | quote }}
          ENABLE_MALWARE_SCAN: {{ .Values.chat.nodeIngestion.env.ENABLE_MALWARE_SCAN | quote }}
          FILE_RETENTION_IN_DAYS: {{ .Values.chat.nodeIngestion.env | get "FILE_RETENTION_IN_DAYS" 0 }}
          EMBEDDING_DIMENSION: {{ .Values.chat.nodeIngestion.env | get "EMBEDDING_DIMENSION" 1536 }}
          REPLICATION_FACTOR: {{ .Values.chat.nodeIngestion.env | get "REPLICATION_FACTOR" 1 }}
          INGESTION_UPLOAD_API_URL: https://api.{{ .Values.host }}/scoped/ingestion/upload
          RERANKER_CONFIGURATION: {{ .Values.chat.nodeIngestion.env.RERANKER_CONFIGURATION | quote }}
          ADDITIONAL_INGESTION_QUEUES: '["chat_queue"]'
          UNIQUE_INSTALLATION_ID: {{ .Values.host }}
          USE_NEW_FTS_QUERY_APPROACH: {{ .Values.chat.nodeIngestion.env | get "USE_NEW_FTS_QUERY_APPROACH" "true" }}
          MAX_REQUEST_BODY_SIZE: {{ .Values.chat.nodeIngestion.env | get "MAX_REQUEST_BODY_SIZE" "30mb" }}
        envSecrets:
          AZURE_OPENAI_API_ENDPOINT: {{ .Values.chat.nodeIngestion.secrets.AZURE_OPENAI_API_ENDPOINT | fetchSecretValue | quote }}
          AMQP_URL: {{ .Values.rabbitMQ.url | fetchSecretValue | quote }}
          AZURE_FGPT_STORAGE_CONNECTION_STRING: {{ .Values.chat.nodeIngestion.secrets.AZURE_FGPT_STORAGE_CONNECTION_STRING | fetchSecretValue | quote }}
          AZURE_INGESTION_CACHE_STORAGE_CONNECTION_STRING: {{.Values.chat.nodeIngestion.secrets.AZURE_INGESTION_CACHE_STORAGE_CONNECTION_STRING | fetchSecretValue | quote }}
          DATABASE_URL: "postgresql://{{ .Values.chat._common.database.username | fetchSecretValue }}:{{ .Values.chat._common.database.password | fetchSecretValue }}@{{ .Values.chat._common.database.host | fetchSecretValue }}/ingestion"
          INGESTION_ENCRYPTION_KEY: {{ .Values.chat.nodeIngestion.secrets.INGESTION_ENCRYPTION_KEY | fetchSecretValue | quote }}
          AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS: {{ .Values.chat.nodeIngestion.secrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS | fetchSecretValue | quote }}
        resources:
          {{ .Values.chat.nodeIngestion.resources | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nodeIngestion.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
        autoscaling:
          enabled: true
          minReplicas: {{ .Values.chat.nodeIngestion  | get "replicaCount" 2 }}
          maxReplicas: 6
          targetCPUUtilizationPercentage: 80
          targetMemoryUtilizationPercentage: 80
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-ingestion; npx prisma migrate deploy
        cronJob:
          enabled: true
          name: expired-content-deletion
          suspend: false
          schedule: "*/5 * * * *"
          timeZone: Europe/Zurich
          concurrencyPolicy: Forbid
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 2
          env:
            RUNNING_MODE: 'expired-content-deletion'
          startingDeadlineSeconds: 10
          jobTemplate:
            restartPolicy: Never
            containers:
              name: node-ingestion-expired-content-deletion
  - name: node-ingestion-worker
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-ingestion-worker
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nodeIngestionWorker | default .Values.chat._common.defaultReleases.nodeIngestionWorker | quote }}
        replicaCount: 0
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8093
        serviceAccount:
          enabled: true
          workloadIdentity:
            clientId: {{ .Values.chat.nodeIngestionWorker.secrets.WORKLOAD_IDENTITY_CLIENT_ID | fetchSecretValue | quote }}
            enabled: true
        env:
          LOG_LEVEL: info
          CHAT_API_URL: http://node-chat.chat.svc.cluster.local:8092
          INGESTION_API_URL: http://node-ingestion.chat.svc.cluster.local:8091
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          AUDIT_LOG_DIR: /audit
          MAX_HEAP_MB: {{ .Values.chat.nodeIngestionWorker.env.MAX_HEAP_MB }}
          CONVERT_OFFICE_FILES_TO_PDF: {{ .Values.chat.nodeIngestionWorker.env.CONVERT_OFFICE_FILES_TO_PDF | quote }}
          EMBEDDING_BATCH_SIZE: {{ .Values.chat.nodeIngestionWorker.env | get "EMBEDDING_BATCH_SIZE" 16 }}
          INGESTION_QUEUE: 'queue'
          CUSTOM_API_DEFINITIONS: {{ .Values.chat.nodeIngestionWorker.env.CUSTOM_API_DEFINITIONS | quote }}
          FEATURE_FLAG_ENABLE_PPT_PAGE_BASED_CHUNKING_UN_9444: {{ .Values.chat.nodeIngestionWorker.env.FEATURE_FLAG_ENABLE_PPT_PAGE_BASED_CHUNKING_UN_9444 | quote }}
          FEATURE_FLAG_ENABLE_LANDSCAPED_PDF_PAGE_BASED_CHUNKING_UN_10606: {{ .Values.chat.nodeIngestionWorker.env.FEATURE_FLAG_ENABLE_LANDSCAPED_PDF_PAGE_BASED_CHUNKING_UN_10606 | quote }}
        envSecrets:
          AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS: {{ .Values.chat.nodeIngestionWorker.secrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS | fetchSecretValue | quote }}
          AMQP_URL: {{ .Values.rabbitMQ.url | fetchSecretValue | quote }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        resources:
          {{ .Values.chat.nodeIngestionWorker.resources | toYaml | nindent 10 }}
        probes:
          liveness:
            failureThreshold: 36 # 10*36 = 6min max not live - OK for ingestion-worker
        volumes:
          - name: tmp-volume
            emptyDir:
              sizeLimit: 20Gi
        volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
        eventBasedAutoscaling:
          enabled: true
          minReplicaCount: {{ .Values.eventBasedAutoscaling.nodeIngestionWorker | get "minReplicaCount" 0 }}
          maxReplicaCount: {{ .Values.eventBasedAutoscaling.nodeIngestionWorker | get "maxReplicaCount" 6 }}
          cron: {{- if hasKey .Values.eventBasedAutoscaling.nodeIngestionWorker "cron" }}
            {{ toYaml .Values.eventBasedAutoscaling.nodeIngestionWorker.cron | nindent 12 }}
          {{- else }} null
          {{- end }}
          rabbitmq:
            queueName: unique.node.ingestion.queue
        terminationGracePeriodSeconds: 900 # 15min
  - name: node-ingestion-worker-chat
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-ingestion-worker
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nodeIngestionWorker | default .Values.chat._common.defaultReleases.nodeIngestionWorker | quote }}
        replicaCount: 0
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8093
        serviceAccount:
          enabled: true
          workloadIdentity:
            clientId: {{ .Values.chat.nodeIngestionWorkerChat.secrets.WORKLOAD_IDENTITY_CLIENT_ID | fetchSecretValue | quote }}
            enabled: true
        env:
          LOG_LEVEL: info
          INGESTION_API_URL: http://node-ingestion.chat.svc.cluster.local:8091
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          AUDIT_LOG_DIR: /audit
          MAX_HEAP_MB: {{ .Values.chat.nodeIngestionWorker.env.MAX_HEAP_MB }}
          CONVERT_OFFICE_FILES_TO_PDF: {{ .Values.chat.nodeIngestionWorker.env.CONVERT_OFFICE_FILES_TO_PDF | quote }}
          EMBEDDING_BATCH_SIZE: {{ .Values.chat.nodeIngestionWorker.env | get "EMBEDDING_BATCH_SIZE" 16 }}
          INGESTION_QUEUE: 'chat_queue'
          CUSTOM_API_DEFINITIONS: {{ .Values.chat.nodeIngestionWorker.env.CUSTOM_API_DEFINITIONS | quote }}
          CHAT_API_URL: http://node-chat.chat.svc.cluster.local:8092
          FEATURE_FLAG_ENABLE_PPT_PAGE_BASED_CHUNKING_UN_9444: {{ .Values.chat.nodeIngestionWorker.env.FEATURE_FLAG_ENABLE_PPT_PAGE_BASED_CHUNKING_UN_9444 | quote }}
          FEATURE_FLAG_ENABLE_LANDSCAPED_PDF_PAGE_BASED_CHUNKING_UN_10606: {{ .Values.chat.nodeIngestionWorker.env.FEATURE_FLAG_ENABLE_LANDSCAPED_PDF_PAGE_BASED_CHUNKING_UN_10606 | quote }}
        envSecrets:
          AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS: {{ .Values.chat.nodeIngestionWorker.secrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINTS | fetchSecretValue | quote }}
          AMQP_URL: {{ .Values.rabbitMQ.url | fetchSecretValue | quote }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        resources:
          {{ .Values.chat.nodeIngestionWorker.resources | toYaml | nindent 10 }}
        probes:
          liveness:
            failureThreshold: 36 # 10*36 = 6min max not live - OK for ingestion-worker
        volumes:
          - name: tmp-volume
            emptyDir:
              sizeLimit: 20Gi
        volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
        eventBasedAutoscaling:
          enabled: true
          minReplicaCount: {{ .Values.eventBasedAutoscaling.nodeIngestionWorkerChat | get "minReplicaCount" 0 }}
          maxReplicaCount: {{ .Values.eventBasedAutoscaling.nodeIngestionWorkerChat | get "maxReplicaCount" 6 }}
          cron: {{- if hasKey .Values.eventBasedAutoscaling.nodeIngestionWorkerChat "cron" }}
            {{ toYaml .Values.eventBasedAutoscaling.nodeIngestionWorkerChat.cron | nindent 12 }}
          {{- else }} null
          {{- end }}
          rabbitmq:
            queueName: unique.node.ingestion.chat_queue
        terminationGracePeriodSeconds: 900 # 15min
  - name: node-chat
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-chat
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nodeChat | default .Values.chat._common.defaultReleases.nodeChat | quote }}
        replicaCount: {{ .Values.chat.nodeChat | get "replicaCount" 2 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8093
        serviceAccount:
          enabled: true
          workloadIdentity:
            clientId: {{ .Values.chat.nodeChat.secrets.WORKLOAD_IDENTITY_CLIENT_ID | fetchSecretValue | quote }}
            enabled: true
        env:
          LOG_LEVEL: info
          AZURE_OPENAI_API_ENDPOINTS_JSON: {{ .Values.chat.nodeChat.secrets.AZURE_OPENAI_API_ENDPOINTS_JSON | fetchSecretValue | quote }}
          INGESTION_API_URL: http://node-ingestion.chat.svc.cluster.local:8091
          SCOPE_MANAGEMENT_API_URL: http://node-scope-management.chat.svc.cluster.local:8094
          OPENAI_PROVIDER: azure
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          PUBSUB_BACKEND: {{ .Values.chat.nodeChat.env.PUBSUB_BACKEND | quote }}
          PUBSUB_REDIS_HOST: {{ .Values.tyk.redis.host | fetchSecretValue | quote }}
          PUBSUB_REDIS_PORT: {{ .Values.tyk.redis.port | fetchSecretValue | quote }}
          PUBSUB_REDIS_DB: 2
          AUDIT_LOG_DIR: /audit
          CORS_ALLOWED_ORIGINS: https://{{ .Values.host }}
          MAX_HEAP_MB: {{ .Values.chat.nodeChat.env.MAX_HEAP_MB }}
          ANONYMIZED_CHAT_INTERACTIONS_EXPORT: {{ .Values.chat.nodeChat.env | get "ANONYMIZED_CHAT_INTERACTIONS_EXPORT" true }}
          BENCHMARKS_PER_MINUTE_PER_PROCESS: {{ .Values.chat.nodeChat.env | get "BENCHMARKS_PER_MINUTE_PER_PROCESS" 1 }}
          AMQP_BENCHMARK_PREFETCH: {{ .Values.chat.nodeChat.env | get "AMQP_BENCHMARK_PREFETCH" 1 }}
          INTERNAL_MODULES_CONFIG: {{ .Values.chat.nodeChat.env.INTERNAL_MODULES_CONFIG | quote }}
          ENABLE_CLIENT_INSIGHT_SHIPPER: {{ .Values.chat.nodeChat.env | get "ENABLE_CLIENT_INSIGHT_SHIPPER" false }}
          MIN_NO_OF_MESSAGES_BY_USER_BEFORE_NPS_TRIGGER: {{ .Values.chat.nodeChat.env | get "MIN_NO_OF_MESSAGES_BY_USER_BEFORE_NPS_TRIGGER" 30 }}
          UNIQUE_INSTALLATION_ID: {{ .Values.host }}
          EXPORT_PROMPTS_ACCESS_CONTROL: {{ .Values.chat.nodeChat.env | get "EXPORT_PROMPTS_ACCESS_CONTROL" true }}
          APP_REPOSITORY_URL: {{ .Values.chat.nodeChat.env | get "APP_REPOSITORY_URL" "http://node-app-repository.apps.svc.cluster.local:8088" }}
          ENABLE_DOWNLOAD_UPLOAD_FILES_AS_STREAM: {{ .Values.chat.nodeChat.env | get "ENABLE_DOWNLOAD_UPLOAD_FILES_AS_STREAM" true }}
          ENABLE_UPLOAD_CHAT_INTERACTIONS_AS_STREAM: {{ .Values.chat.nodeChat.env | get "ENABLE_UPLOAD_CHAT_INTERACTIONS_AS_STREAM" true }}
          ENABLE_ANALYTICS_CHAT_DETAILED_INTERACTIONS_PRISMA_CURSOR: {{ .Values.chat.nodeChat.env | get "ENABLE_ANALYTICS_CHAT_DETAILED_INTERACTIONS_PRISMA_CURSOR" true }}
        envSecrets:
          DATABASE_URL: "postgresql://{{ .Values.chat._common.database.username | fetchSecretValue }}:{{ .Values.chat._common.database.password | fetchSecretValue }}@{{ .Values.chat._common.database.host | fetchSecretValue }}/chat"
          PUBSUB_REDIS_PASSWORD: {{ .Values.tyk.redis.password | fetchSecretValue | quote }}
          AMQP_URL: {{ .Values.rabbitMQ.url | fetchSecretValue | quote }}
          AZURE_FGPT_STORAGE_CONNECTION_STRING: {{ .Values.chat.nodeChat.secrets.AZURE_FGPT_STORAGE_CONNECTION_STRING | fetchSecretValue | quote }}
          CHAT_LXM_ENCRYPTION_KEY: {{ .Values.chat.nodeChat.secrets.CHAT_LXM_ENCRYPTION_KEY | fetchSecretValue | quote }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nodeChat.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        resources:
          {{ .Values.chat.nodeChat.resources | toYaml | nindent 10 }}
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
        autoscaling:
          enabled: true
          minReplicas: {{ .Values.chat.nodeChat | get "replicaCount" 2 }}
          maxReplicas: 6
          targetCPUUtilizationPercentage: 80
          targetMemoryUtilizationPercentage: 80
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-chat; npx prisma migrate deploy; cd /node; RUNNING_MODE=DATA_MIGRATION  node /node/dist/apps/node-chat/main.js up;
        cronJob:
          enabled: true
          name: data-redaction-task
          suspend: false
          schedule: "0 0 * * *"
          timeZone: Europe/Zurich
          concurrencyPolicy: Forbid
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 2
          env:
            RUNNING_MODE: 'DATA_REDACTION_TASK'
          startingDeadlineSeconds: 10
          jobTemplate:
            restartPolicy: Never
            containers:
              name: redaction-job
  - name: next-knowledge-upload
    chart: oci://ghcr.io/unique-ag/helm-charts/web-app
    version: 3.2.0
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        replicaCount: {{ .Values.chat.nextKnowledgeUpload | get "replicaCount" 1 }}
        strategy:
          type: {{ .Values.chat.nextKnowledgeUpload | get "strategy.type" "RollingUpdate" }}
        image:
          repository: {{ .Values.chat._common.acr.url }}/web-app-knowledge-upload
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nextKnowledgeUpload | default .Values.chat._common.defaultReleases.nextKnowledgeUpload | quote }}
        imagePullSecrets:
          - name: image-pull-secret
        env:
          CHAT_APP_URL: https://{{ .Values.host }}/chat
          CHAT_BACKEND_API_URL: https://api.{{ .Values.host }}/chat
          INGESTION_BACKEND_API_URL: https://api.{{ .Values.host }}/ingestion
          SCOPE_MANAGEMENT_BACKEND_API_URL: https://api.{{ .Values.host }}/scope-management
          KNOWLEDGE_UPLOAD_APP_URL: https://{{ .Values.host }}/knowledge-upload
          ADMIN_APP_URL: https://{{ .Values.host }}/admin
          THEME_BACKEND_API_URL: https://api.{{ .Values.host }}/configuration
          SELF_URL: https://{{ .Values.host }}/knowledge-upload
          ZITADEL_CLIENT_ID: {{ .Values.zitadel.clientId | quote}}
          ZITADEL_ISSUER: https://id.{{ .Values.host }}
          ZITADEL_ORG_ID: {{ .Values.zitadel.orgId | quote }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          STATIC_THEME_COLORS: {{ .Values.chat.nextTheme.env.STATIC_THEME_COLORS | mustToJson | toString | quote }}
          MAX_HEAP_MB: {{ .Values.chat.nextKnowledgeUpload.env.MAX_HEAP_MB }}
          STATIC_BACKGROUND_COLOR:  >-
            {{ "#" }}{{ .Values.chat.nextTheme.env.STATIC_BACKGROUND_COLOR }}
          STATIC_TAB_NAME: {{ .Values.chat.nextTheme.env.STATIC_TAB_NAME | quote }}
          CONTENT_SECURITY_POLICY_VALUE: {{ .Values.chat._common.env.CONTENT_SECURITY_POLICY_VALUE | quote }}
          FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411: {{ .Values.chat.nextKnowledgeUpload.env.FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411 | quote }}
        resources:
          {{ .Values.chat.nextKnowledgeUpload.resources | toYaml | nindent 10 }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nextKnowledgeUpload.routes | deepCopy }}
          {{- $_ := set $routes "hostname" .Values.host }}
          {{ $routes | toYaml | nindent 10 }}
        ingress:
          {{ .Values.chat._common.ingressDefaults | toYaml | nindent 10 }}
          hosts:
            - host: "{{ .Values.host }}"
              paths:
                - path: /knowledge-upload
                  pathType: Prefix
        probes:
          liveness:
            httpGet:
              path: /knowledge-upload/api/health
              port: http
            initialDelaySeconds: 5
          readiness:
            httpGet:
              path: /knowledge-upload/api/health
              port: http
            initialDelaySeconds: 5
  - name: next-chat
    chart: oci://ghcr.io/unique-ag/helm-charts/web-app
    version: 3.2.0
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        replicaCount: {{ .Values.chat.nextChat | get "replicaCount" 1 }}
        strategy:
          type: {{ .Values.chat.nextChat | get "strategy.type" "RollingUpdate" }}
        image:
          repository: {{ .Values.chat._common.acr.url }}/web-app-chat
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nextChat | default .Values.chat._common.defaultReleases.nextChat | quote }}
        imagePullSecrets:
          - name: image-pull-secret
        resources:
          {{ .Values.chat.nextChat.resources | toYaml | nindent 10 }}
        env:
          CHAT_APP_URL: https://{{ .Values.host }}/chat
          CHAT_BACKEND_API_URL: https://api.{{ .Values.host }}/chat
          INGESTION_BACKEND_API_URL: https://api.{{ .Values.host }}/ingestion
          SCOPE_MANAGEMENT_BACKEND_API_URL: https://api.{{ .Values.host }}/scope-management
          THEME_BACKEND_API_URL: https://api.{{ .Values.host }}/configuration
          KNOWLEDGE_UPLOAD_APP_URL: https://{{ .Values.host }}/knowledge-upload
          ADMIN_APP_URL: https://{{ .Values.host }}/admin
          SELF_URL: https://{{ .Values.host }}/chat
          ZITADEL_CLIENT_ID: {{ .Values.zitadel.clientId | quote}}
          ZITADEL_ISSUER: https://id.{{ .Values.host }}
          ZITADEL_ORG_ID: {{ .Values.zitadel.orgId | quote }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          STATIC_THEME_COLORS: {{ .Values.chat.nextTheme.env.STATIC_THEME_COLORS | mustToJson | toString | quote }}
          STATIC_TAB_NAME: {{ .Values.chat.nextTheme.env.STATIC_TAB_NAME | quote }}
          MAX_FILE_SIZE_IN_MB: {{ .Values.chat.nextChat.env | get "MAX_FILE_SIZE_IN_MB" 100 }}
          MAX_HEAP_MB: {{ .Values.chat.nextChat.env | get "MAX_HEAP_MB" 400 }}
          STATIC_BACKGROUND_COLOR:  >-
            {{ "#" }}{{ .Values.chat.nextTheme.env.STATIC_BACKGROUND_COLOR }}
          FEATURE_FLAG_NET_PROMOTER_SCORE_UI_UN_7747: {{ .Values.chat.nextChat.env | get "FEATURE_FLAG_NET_PROMOTER_SCORE_UI_UN_7747" "" | quote }}
          CONTENT_SECURITY_POLICY_VALUE: {{ .Values.chat._common.env.CONTENT_SECURITY_POLICY_VALUE | quote }}
          FEATURE_FLAG_IN_DOCUMENT_TRANSLATOR_UN_8405: {{ .Values.chat.nextChat.env.FEATURE_FLAG_IN_DOCUMENT_TRANSLATOR_UN_8405 | quote }}
          FILE_TYPES_DOCUMENT_TRANSLATOR: {{ .Values.chat.nextChat.env.FILE_TYPES_DOCUMENT_TRANSLATOR | quote }}
          FEATURE_FLAG_ENABLE_LATEX_UN_8603: {{ .Values.chat.nextChat.env.FEATURE_FLAG_ENABLE_LATEX_UN_8603 | quote }}
          FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411: {{ .Values.chat.nextChat.env.FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411 | quote }}
          FEATURE_FLAG_ENABLE_CHAT_HISTORY_UN_5803: {{ .Values.chat.nextChat.env.FEATURE_FLAG_ENABLE_CHAT_HISTORY_UN_5803 | quote }}
        extraObjects:
          {{ .Values.chat.nextChat.extraObjects | toYaml | nindent 10 }}
        extraRoutes:
          {{ .Values.chat.nextChat.extraRoutes | toYaml | nindent 10 }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nextChat.routes | deepCopy }}
          {{- $_ := set $routes "hostname" .Values.host }}
          {{ $routes | toYaml | nindent 10 }}
        ingress:
          {{ .Values.chat._common.ingressDefaults | toYaml | nindent 10 }}
          hosts:
            - host: "{{ .Values.host }}"
              paths:
                - path: /chat
                  pathType: Prefix
        probes:
          liveness:
            httpGet:
              path: /chat/api/health
              port: http
            initialDelaySeconds: 5
          readiness:
            httpGet:
              path: /chat/api/health
              port: http
            initialDelaySeconds: 5
  - name: next-theme
    chart: oci://ghcr.io/unique-ag/helm-charts/web-app
    version: 3.2.0
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        replicaCount: {{ .Values.chat.nextTheme | get "replicaCount" 1 }}
        strategy:
          type: {{ .Values.chat.nextTheme | get "strategy.type" "RollingUpdate" }}
        image:
          repository: {{ .Values.chat._common.acr.url }}/web-app-theme
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nextTheme | default .Values.chat._common.defaultReleases.nextTheme | quote }}
        imagePullSecrets:
          - name: image-pull-secret
        resources:
          {{ .Values.chat.nextTheme.resources | toYaml | nindent 10 }}
        env:
          SELF_URL: https://{{ .Values.host }}/theme
          ZITADEL_CLIENT_ID: {{ .Values.zitadel.clientId | quote}}
          ZITADEL_ISSUER: https://id.{{ .Values.host }}
          ZITADEL_ORG_ID: {{ .Values.zitadel.orgId | quote }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          ADMIN_APP_URL: https://{{ .Values.host }}/admin
          CHAT_BACKEND_API_URL: https://api.{{ .Values.host }}/chat
          CHAT_APP_URL: https://{{ .Values.host }}/chat
          KNOWLEDGE_UPLOAD_APP_URL: https://{{ .Values.host }}/knowledge-upload
          THEME_BACKEND_API_URL: https://api.{{ .Values.host }}/configuration
          MAX_HEAP_MB: {{ .Values.chat.nextTheme.env.MAX_HEAP_MB }}
          CONTENT_SECURITY_POLICY_VALUE: {{ .Values.chat._common.env.CONTENT_SECURITY_POLICY_VALUE | quote }}
          FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411: {{ .Values.chat.nextTheme.env.FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411 | quote }}
        securityContext: null # FIXME should be set but we did not want to change it
        routes:
          {{- $routes := .Values.chat.nextTheme.routes | deepCopy }}
          {{- $_ := set $routes "hostname" .Values.host }}
          {{ $routes | toYaml | nindent 10 }}
        ingress:
          {{ .Values.chat._common.ingressDefaults | toYaml | nindent 10 }}
          hosts:
            - host: "{{ .Values.host }}"
              paths:
                - path: /theme
                  pathType: Prefix
        probes:
          liveness:
            httpGet:
              path: /theme/api/health
              port: http
            initialDelaySeconds: 5
          readiness:
            httpGet:
              path: /theme/api/health
              port: http
            initialDelaySeconds: 5
  - name: next-admin
    chart: oci://ghcr.io/unique-ag/helm-charts/web-app
    version: 3.2.0
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        replicaCount: {{ .Values.chat.nextAdmin | get "replicaCount" 1 }}
        strategy:
          type: {{ .Values.chat.nextAdmin | get "strategy.type" "RollingUpdate" }}
        image:
          repository: {{ .Values.chat._common.acr.url }}/web-app-admin
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nextAdmin | default .Values.chat._common.defaultReleases.nextAdmin | quote }}
        imagePullSecrets:
          - name: image-pull-secret
        resources:
          {{ .Values.chat.nextAdmin.resources | toYaml | nindent 10 }}
        env:
          CHAT_APP_URL: https://{{ .Values.host }}/chat
          CHAT_BACKEND_API_URL: https://api.{{ .Values.host }}/chat
          SCOPE_MANAGEMENT_BACKEND_API_URL: https://api.{{ .Values.host }}/scope-management
          APP_REPOSITORY_BACKEND_API_URL: https://api.{{ .Values.host }}/apps
          KNOWLEDGE_UPLOAD_APP_URL: https://{{ .Values.host }}/knowledge-upload
          THEME_BACKEND_API_URL: https://api.{{ .Values.host }}/configuration
          SELF_URL: https://{{ .Values.host }}/admin
          ZITADEL_CLIENT_ID: {{ .Values.zitadel.clientId | quote}}
          ZITADEL_ISSUER: https://id.{{ .Values.host }}
          ZITADEL_ORG_ID: {{ .Values.zitadel.orgId | quote }}
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          MAX_HEAP_MB: {{ .Values.chat.nextAdmin.env.MAX_HEAP_MB }}
          STATIC_THEME_COLORS: {{ .Values.chat.nextTheme.env.STATIC_THEME_COLORS | mustToJson | toString | quote }}
          STATIC_BACKGROUND_COLOR:  >-
            {{ "#" }}{{ .Values.chat.nextTheme.env.STATIC_BACKGROUND_COLOR }}
          STATIC_TAB_NAME: {{ .Values.chat.nextTheme.env.STATIC_TAB_NAME | quote }}
          CONTENT_SECURITY_POLICY_VALUE: {{ .Values.chat._common.env.CONTENT_SECURITY_POLICY_VALUE | quote }}
          INGESTION_BACKEND_API_URL: https://api.{{ .Values.host }}/ingestion
          FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411: {{ .Values.chat.nextAdmin.env.FEATURE_FLAG_ENABLE_NOTIFICATION_BANNER_UN_9411 | quote }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nextAdmin.routes | deepCopy }}
          {{- $_ := set $routes "hostname" .Values.host }}
          {{ $routes | toYaml | nindent 10 }}
        ingress:
          {{ .Values.chat._common.ingressDefaults | toYaml | nindent 10 }}
          hosts:
            - host: "{{ .Values.host }}"
              paths:
                - path: /admin
                  pathType: Prefix
        probes:
          liveness:
            httpGet:
              path: /admin/api/health
              port: http
            initialDelaySeconds: 5
          readiness:
            httpGet:
              path: /admin/api/health
              port: http
            initialDelaySeconds: 5
  - name: configuration-backend
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-configuration
          tag: {{ .Values.chat._common.tenantReleaseOverrides.configurationBackend | default .Values.chat._common.defaultReleases.configurationBackend | quote }}
        replicaCount: {{ .Values.chat.configurationBackend | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8095
        env:
          AUDIT_LOG_DIR: /audit
          LOG_LEVEL: info
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          CORS_ALLOWED_ORIGINS: https://{{ .Values.host }}
          MAX_HEAP_MB: {{ .Values.chat.configurationBackend.env.MAX_HEAP_MB }}
        envSecrets:
          DATABASE_URL: "postgresql://{{ .Values.chat._common.database.username | fetchSecretValue }}:{{ .Values.chat._common.database.password | fetchSecretValue }}@{{ .Values.chat._common.database.host | fetchSecretValue }}/theme"
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.configurationBackend.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        resources:
          {{ .Values.chat.configurationBackend.resources | toYaml | nindent 10 }}
        hooks:
          migration:
            enabled: true
            command: |
              cd /home/node/app/prisma; npx prisma migrate deploy
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
  - name: node-scope-management
    chart: oci://ghcr.io/unique-ag/helm-charts/backend-service
    version: 3.3.1
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        image:
          repository: {{ .Values.chat._common.acr.url }}/backend-service-scope-management
          tag: {{ .Values.chat._common.tenantReleaseOverrides.nodeScopeManagement | default .Values.chat._common.defaultReleases.nodeScopeManagement | quote }}
        replicaCount: {{ .Values.chat.nodeScopeManagement | get "replicaCount" 1 }}
        imagePullSecrets:
          - name: image-pull-secret
        service:
          port: 8094
        env:
          AUDIT_LOG_DIR: /audit
          LOG_LEVEL: info
          ZITADEL_PROJECT_ID: {{ .Values.zitadel.projectId | quote}}
          ZITADEL_ROOT_ORG_ID: {{ .Values.chat.nodeScopeManagement.env.ZITADEL_ROOT_ORG_ID | quote }}
          CORS_ALLOWED_ORIGINS: https://{{ .Values.host }}
          ZITADEL_HOST: https://id.{{ .Values.host }}
          ZITADEL_INTERNAL_HOST: http://zitadel.system.svc.cluster.local:8080
          MAX_HEAP_MB: {{ .Values.chat.nodeScopeManagement.env.MAX_HEAP_MB }}
          INGESTION_API_URL: http://node-ingestion.chat.svc.cluster.local:8091
          CHAT_API_URL: http://node-chat.chat.svc.cluster.local:8093
          ENABLE_CLIENT_INSIGHT_SHIPPER: {{ .Values.chat.nodeScopeManagement.env | get "ENABLE_CLIENT_INSIGHT_SHIPPER" false }}
          UNIQUE_INSTALLATION_ID: {{ .Values.host }}
        envSecrets:
          DATABASE_URL: "postgresql://{{ .Values.chat._common.database.username | fetchSecretValue }}:{{ .Values.chat._common.database.password | fetchSecretValue }}@{{ .Values.chat._common.database.host | fetchSecretValue }}/scope-management"
          ZITADEL_PAT: {{ .Values.chat.nodeScopeManagement.secrets.ZITADEL_PAT | fetchSecretValue | quote }}
          SCOPE_MANAGEMENT_ENCRYPTION_KEY_1: {{ .Values.chat.nodeScopeManagement.secrets.SCOPE_MANAGEMENT_ENCRYPTION_KEY_1 | fetchSecretValue | quote }}
          SCOPE_MANAGEMENT_ENCRYPTION_KEY_2: {{ .Values.chat.nodeScopeManagement.secrets.SCOPE_MANAGEMENT_ENCRYPTION_KEY_2 | fetchSecretValue | quote }}
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
        routes:
          {{- $routes := .Values.chat.nodeScopeManagement.routes | deepCopy }}
          {{- $_ := set $routes "hostname" (printf "api.%s" .Values.host) }}
          {{ $routes | toYaml | nindent 10 }}
        extraRoutes:
          {{ .Values.chat.nodeScopeManagement.extraRoutes | toYaml | nindent 10 }}
        resources:
          {{ .Values.chat.nodeScopeManagement.resources | toYaml | nindent 10 }}
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-scope-management; npx prisma migrate deploy; cd /node; RUNNING_MODE=DATA_MIGRATION node /node/dist/apps/node-scope-management/main.js up;
        cronJob:
          enabled: true
          name: user-sync
          suspend: false
          schedule: "*/5 * * * *"
          timeZone: Europe/Zurich
          concurrencyPolicy: Forbid
          successfulJobsHistoryLimit: 1
          failedJobsHistoryLimit: 2
          env:
            RUNNING_MODE: 'user-sync'
            AUDIT_LOG_DIR: /dev/stdout
          startingDeadlineSeconds: 10
          jobTemplate:
            restartPolicy: Never
            containers:
              name: node-scope-management-user-sync
        auditVolume:
          enabled: {{ .Values.chat._common.auditVolume.enabled }}
          mountPath: /audit
          attributes:
            resourceGroup: {{ .Values.chat._common.auditVolume.resourceGroup | fetchSecretValue | quote }}
            storageAccount: {{ .Values.chat._common.auditVolume.storageAccount | fetchSecretValue | quote }}
  - name: assistants-core
    chart: oci://ghcr.io/unique-ag/helm-charts/ai-service
    version: 1.2.7
    namespace: chat
    createNamespace: true
    wait: false
    values:
      -
        replicaCount: {{ .Values.chat.assistantsCore | get "replicaCount" 2 }}
        strategy:
          type: {{ .Values.chat.assistantsCore | get "strategy.type" "RollingUpdate" }}
        image:
          repository: {{ .Values.chat._common.acr.url }}/ai-service-assistants-core
          tag: {{ .Values.chat._common.tenantReleaseOverrides.assistantsCore | default .Values.chat._common.defaultReleases.assistantsCore | quote }}
        imagePullSecrets:
          - name: image-pull-secret
        serviceAccount:
          enabled: true
          workloadIdentity:
            clientId: {{ .Values.chat.assistantsCore.envSecrets.WORKLOAD_IDENTITY_CLIENT_ID | fetchSecretValue | quote }}
            enabled: true
        env:
          API_BASE: http://node-chat.chat.svc.cluster.local:8093/public
          GUNICORN_WORKERS: {{ .Values.chat.assistantsCore.env.GUNICORN_WORKERS }}
          GUNICORN_THREADS: {{ .Values.chat.assistantsCore.env.GUNICORN_THREADS }}
          BING_API_ENDPOINT: {{ .Values.chat.assistantsCore.env.BING_API_ENDPOINT | fetchSecretValue | quote }}
          AZURE_DOCUMENT_INTELLIGENCE_LOCATION: {{ .Values.chat.assistantsCore.env.AZURE_DOCUMENT_INTELLIGENCE_LOCATION | quote }}
          AZURE_DOCUMENT_INTELLIGENCE_API_VERSION: {{ .Values.chat.assistantsCore.env.AZURE_DOCUMENT_INTELLIGENCE_API_VERSION | quote }}
          ENABLED_MIME_TYPES_DOCUMENT_TRANSLATION: {{ .Values.chat.assistantsCore.env.ENABLED_MIME_TYPES_DOCUMENT_TRANSLATION | quote }}
        envSecrets:
          BING_SEARCH_V7_SUBSCRIPTION_KEY: {{ .Values.chat.assistantsCore.envSecrets.BING_SEARCH_V7_SUBSCRIPTION_KEY | fetchSecretValue | quote }}
          AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT_DEFINITIONS: {{ .Values.chat.assistantsCore.envSecrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT_DEFINITIONS | fetchSecretValue | quote }}
        resources:
          {{ .Values.chat.assistantsCore.resources | toYaml | nindent 10 }}
        eventBasedAutoscaling:
          enabled: false
        securityContext:
          {{ .Values.chat._common.securityContext | toYaml | nindent 10 }}
  - name: zitadel-self-ca-cert
    chart: bedag/raw
    namespace: system
    version: 2.0.0
    wait: false
    values:
      - resources:
          - kind: Secret
            apiVersion: v1
            metadata:
              name: zitadel-self-ca-cert
            # This cert is public - DigiCert Global Root CA
            # https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/how-to-connect-tls-ssl#applications-that-require-certificate-verification-for-tlsssl-connectivity
            stringData:
              ca.crt: |-
                # subject=C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert Global Root CA
                -----BEGIN CERTIFICATE-----
                MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
                MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
                d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
                QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
                MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
                b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
                9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
                CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
                nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
                43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
                T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
                gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
                BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
                TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
                DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
                hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
                06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
                PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
                YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
                CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
                -----END CERTIFICATE-----
                # subject=C=US, O=DigiCert Inc, OU=www.digicert.com, CN=DigiCert Global Root G2
                -----BEGIN CERTIFICATE-----
                MIIDjjCCAnagAwIBAgIQAzrx5qcRqaC7KGSxHQn65TANBgkqhkiG9w0BAQsFADBh
                MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
                d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH
                MjAeFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVT
                MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
                b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEcyMIIBIjANBgkqhkiG
                9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuzfNNNx7a8myaJCtSnX/RrohCgiN9RlUyfuI
                2/Ou8jqJkTx65qsGGmvPrC3oXgkkRLpimn7Wo6h+4FR1IAWsULecYxpsMNzaHxmx
                1x7e/dfgy5SDN67sH0NO3Xss0r0upS/kqbitOtSZpLYl6ZtrAGCSYP9PIUkY92eQ
                q2EGnI/yuum06ZIya7XzV+hdG82MHauVBJVJ8zUtluNJbd134/tJS7SsVQepj5Wz
                tCO7TG1F8PapspUwtP1MVYwnSlcUfIKdzXOS0xZKBgyMUNGPHgm+F6HmIcr9g+UQ
                vIOlCsRnKPZzFBQ9RnbDhxSJITRNrw9FDKZJobq7nMWxM4MphQIDAQABo0IwQDAP
                BgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUTiJUIBiV
                5uNu5g/6+rkS7QYXjzkwDQYJKoZIhvcNAQELBQADggEBAGBnKJRvDkhj6zHd6mcY
                1Yl9PMWLSn/pvtsrF9+wX3N3KjITOYFnQoQj8kVnNeyIv/iPsGEMNKSuIEyExtv4
                NeF22d+mQrvHRAiGfzZ0JFrabA0UWTW98kndth/Jsw1HKj2ZL7tcu7XUIOGZX1NG
                Fdtom/DzMNU+MeKNhJ7jitralj41E6Vf8PlwUHBHQRFXGU7Aj64GxJUTFy8bJZ91
                8rGOmaFvE7FBcf6IKshPECBV1/MUReXgRPTqh5Uykw7+U0b6LJ3/iyK5S9kJRaTe
                pLiaWN0bfVKfjllDiIGknibVb63dDcY3fe0Dkhvld1927jyNxF1WW6LZZm6zNTfl
                MrY=
                -----END CERTIFICATE-----
                # subject=C=US, O=Microsoft Corporation, CN=Microsoft RSA Root Certificate Authority 2017
                -----BEGIN CERTIFICATE-----
                MIIFqDCCA5CgAwIBAgIQHtOXCV/YtLNHcB6qvn9FszANBgkqhkiG9w0BAQwFADBl
                MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTYw
                NAYDVQQDEy1NaWNyb3NvZnQgUlNBIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
                IDIwMTcwHhcNMTkxMjE4MjI1MTIyWhcNNDIwNzE4MjMwMDIzWjBlMQswCQYDVQQG
                EwJVUzEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTYwNAYDVQQDEy1N
                aWNyb3NvZnQgUlNBIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTcwggIi
                MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKW76UM4wplZEWCpW9R2LBifOZ
                Nt9GkMml7Xhqb0eRaPgnZ1AzHaGm++DlQ6OEAlcBXZxIQIJTELy/xztokLaCLeX0
                ZdDMbRnMlfl7rEqUrQ7eS0MdhweSE5CAg2Q1OQT85elss7YfUJQ4ZVBcF0a5toW1
                HLUX6NZFndiyJrDKxHBKrmCk3bPZ7Pw71VdyvD/IybLeS2v4I2wDwAW9lcfNcztm
                gGTjGqwu+UcF8ga2m3P1eDNbx6H7JyqhtJqRjJHTOoI+dkC0zVJhUXAoP8XFWvLJ
                jEm7FFtNyP9nTUwSlq31/niol4fX/V4ggNyhSyL71Imtus5Hl0dVe49FyGcohJUc
                aDDv70ngNXtk55iwlNpNhTs+VcQor1fznhPbRiefHqJeRIOkpcrVE7NLP8TjwuaG
                YaRSMLl6IE9vDzhTyzMMEyuP1pq9KsgtsRx9S1HKR9FIJ3Jdh+vVReZIZZ2vUpC6
                W6IYZVcSn2i51BVrlMRpIpj0M+Dt+VGOQVDJNE92kKz8OMHY4Xu54+OU4UZpyw4K
                UGsTuqwPN1q3ErWQgR5WrlcihtnJ0tHXUeOrO8ZV/R4O03QK0dqq6mm4lyiPSMQH
                +FJDOvTKVTUssKZqwJz58oHhEmrARdlns87/I6KJClTUFLkqqNfs+avNJVgyeY+Q
                W5g5xAgGwax/Dj0ApQIDAQABo1QwUjAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/
                BAUwAwEB/zAdBgNVHQ4EFgQUCctZf4aycI8awznjwNnpv7tNsiMwEAYJKwYBBAGC
                NxUBBAMCAQAwDQYJKoZIhvcNAQEMBQADggIBAKyvPl3CEZaJjqPnktaXFbgToqZC
                LgLNFgVZJ8og6Lq46BrsTaiXVq5lQ7GPAJtSzVXNUzltYkyLDVt8LkS/gxCP81OC
                gMNPOsduET/m4xaRhPtthH80dK2Jp86519efhGSSvpWhrQlTM93uCupKUY5vVau6
                tZRGrox/2KJQJWVggEbbMwSubLWYdFQl3JPk+ONVFT24bcMKpBLBaYVu32TxU5nh
                SnUgnZUP5NbcA/FZGOhHibJXWpS2qdgXKxdJ5XbLwVaZOjex/2kskZGT4d9Mozd2
                TaGf+G0eHdP67Pv0RR0Tbc/3WeUiJ3IrhvNXuzDtJE3cfVa7o7P4NHmJweDyAmH3
                pvwPuxwXC65B2Xy9J6P9LjrRk5Sxcx0ki69bIImtt2dmefU6xqaWM/5TkshGsRGR
                xpl/j8nWZjEgQRCHLQzWwa80mMpkg/sTV9HB8Dx6jKXB/ZUhoHHBk2dxEuqPiApp
                GWSZI1b7rCoucL5mxAyE7+WL85MB+GqQk2dLsmijtWKP6T+MejteD+eMuMZ87zf9
                dOLITzNy4ZQ5bb0Sr74MTnB8G2+NszKTc0QWbej09+CVgI+WXTik9KveCjCHk9hN
                AHFiRSdLOkKEW39lt2c0Ui2cFmuqqNh7o0JMcccMyj6D5KbvtwEwXlGjefVwaaZB
                RA+GsCyRxj3qrg+E
                -----END CERTIFICATE-----
  - name: zitadel
    chart: zitadel/zitadel
    namespace: system
    version: {{ .Values.zitadel.versions.chart }}
    createNamespace: true
    wait: false
    values:
      - replicaCount: {{ .Values.zitadel | get "replicaCount" 2 }}
        image:
          tag: {{ .Values.zitadel.versions.image }}
        resources:
        {{ .Values.zitadel.resources | toYaml | nindent 10 }}
        initJob:
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 100m
              memory: 512Mi
        ingress:
          enabled: true
          className: azure-application-gateway
          annotations:
              appgw.ingress.kubernetes.io/ssl-redirect: "true"
              cert-manager.io/cluster-issuer: letsencrypt
          hosts:
            - host: {{ .Values.zitadel.hostName }}
              paths:
                - path: /
                  pathType: ImplementationSpecific
          tls:
            - secretName: zitadeltls
              hosts:
                - {{ .Values.zitadel.hostName }}
        zitadel:
          debug:
            enabled: {{ .Values.zitadel | get "debug" false }}
            annotations:
              helm.sh/hook: pre-install,pre-upgrade
              helm.sh/hook-weight: "1"
          dbSslCaCrtSecret: zitadel-self-ca-cert
          # The chart: https://github.com/zitadel/zitadel-charts/blob/main/charts/zitadel/values.yaml
          masterkey: {{ .Values.zitadel.mainKey | fetchSecretValue | quote }}
          configmapConfig:
            # All values: https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
            ExternalDomain: {{ .Values.zitadel.hostName }} # ! Changing this breaks the system
            ExternalPort: 443 # ! Changing this breaks the system
            ExternalSecure: true # ! Changing this breaks the system
            LogStore:
              Access:
                Stdout:
                  Enabled: true
            TLS:
              Enabled: false # Application Gateway from Azure does this
            Database: # Kubernetes secrets are not secret… We can use the normal config as long as we provision it in this way here (helmfile) - we only need the secretConfig if we get the secret from somewhere else
              postgres:
                Host: {{ .Values.zitadel.database.host | fetchSecretValue | quote }}
                Port: {{ .Values.zitadel.database.port | fetchSecretValue | quote }}
                Database: zitadel
                MaxOpenConns: 50
                MaxIdleConns: 10
                MaxConnLifetime: 1h
                MaxConnIdleTime: 5m
                Options:
                User:
                  Username: z1t4d3l
                  Password: {{ .Values.zitadel.database.zitadelPassword | fetchSecretValue | quote }}
                  SSL:
                    Mode: verify-full
                    RootCert: /.secrets/ca.crt
                    Cert:
                    Key:
                Admin:
                  Username: {{ .Values.zitadel.database.username | fetchSecretValue | quote }}
                  Password: {{ .Values.zitadel.database.password | fetchSecretValue | quote }}
                  SSL:
                    Mode: verify-full
                    RootCert: /.secrets/ca.crt
                    Cert:
                    Key:
            UserAgentCookie:
              Name: uniqueid.useragent
            Login:
              LanguageCookieName: uniqueid.login.lang
              CSRFCookieName: uniqueid.login.csrf
            Quotas:
              Access:
                ExhaustedCookieKey: uniqueid.quota.exhausted
            SystemDefaults:
              Multifactors:
                OTP:
                  Issuer: UNIQUE
              KeyConfig:
                # 90 days
                PrivateKeyLifetime: 2160h
                # 1year. Public key lifetime must be min 2x private key lifetime
                PublicKeyLifetime: 8760h
            DefaultInstance:
              InstanceName: UNIQUE
              DefaultLanguage: en
              DomainPolicy:
                UserLoginMustBeDomain: false
                ValidateOrgDomain: false
              LoginPolicy:
                AllowDomainDiscovery: true
                AllowRegister: false
                IgnoreUnknownUsernames: true
                PasswordCheckLifetime: {{ .Values.zitadel | get "defaultInstance.loginPolicy.passwordCheckLifetime" "240h" }}
                ExternalLoginCheckLifetime: {{ .Values.zitadel | get "defaultInstance.loginPolicy.externalLoginCheckLifetime" "240h" }}
              PrivacyPolicy:
                TOSLink: https://www.unique.ch/terms
                PrivacyLink: https://www.unique.ch/privacy
                SupportEmail: support@unique.ch
              OIDCSettings:
                AccessTokenLifetime: {{ .Values.zitadel | get "defaultInstance.oidcSettings.accessTokenLifetime" "12h" }}
                IdTokenLifetime: {{ .Values.zitadel | get "defaultInstance.oidcSettings.idTokenLifetime" "12h" }}
                RefreshTokenIdleExpiration: {{ .Values.zitadel | get "defaultInstance.oidcSettings.refreshTokenIdleExpiration" "720h" }}
                RefreshTokenExpiration: {{ .Values.zitadel | get "defaultInstance.oidcSettings.refreshTokenExpiration" "2160h" }}
              LabelPolicy:
                PrimaryColor: >-
                  {{ "#" }}{{ .Values.zitadel.theme.light.primary }}
                BackgroundColor: >-
                  {{ "#" }}{{ .Values.zitadel.theme.light.background }}
                WarnColor: >-
                  {{ "#" }}{{ .Values.zitadel.theme.light.warn }}
                FontColor: >-
                  {{ "#" }}{{ .Values.zitadel.theme.light.font }}
                PrimaryColorDark: >-
                  {{ "#" }}{{ .Values.zitadel.theme.dark.primary }}
                BackgroundColorDark: >-
                  {{ "#" }}{{ .Values.zitadel.theme.dark.background }}
                WarnColorDark: >-
                  {{ "#" }}{{ .Values.zitadel.theme.dark.warn }}
                FontColorDark: >-
                  {{ "#" }}{{ .Values.zitadel.theme.dark.font }}
                HideLoginNameSuffix: true
                ErrorMsgPopup: false
                DisableWatermark: true
              MessageTexts:
                - MessageTextType: InitCode
                  Language: de
                  Title: Unique - User initialisieren
                  PreHeader: User initialisieren
                  Subject: User initialisieren
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Dieser Benutzer wurde soeben im Unique erstellt. Mit dem Benutzernamen &lt;br&gt;&lt;strong&gt;{{ "{{" }}.PreferredLoginName{{ "}}" }}&lt;/strong&gt;&lt;br&gt; kannst du dich anmelden. Nutze den untenstehenden Button, um die Initialisierung abzuschliessen &lt;br&gt;(Code &lt;strong&gt;{{ "{{" }}.Code{{ "}}" }}&lt;/strong&gt;).&lt;br&gt; Falls du dieses Mail nicht angefordert hast, kannst du es einfach ignorieren.
                  ButtonText: Initialisierung abschliessen
                - MessageTextType: PasswordReset
                  Language: de
                  Title: Unique - Passwort zurücksetzen
                  PreHeader: Passwort zurücksetzen
                  Subject: Passwort zurücksetzen
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Wir haben eine Anfrage für das Zurücksetzen deines Passwortes bekommen. Du kannst den untenstehenden Button verwenden, um dein Passwort zurückzusetzen &lt;br&gt;(Code &lt;strong&gt;{{ "{{" }}.Code{{ "}}" }}&lt;/strong&gt;).&lt;br&gt; Falls du dieses Mail nicht angefordert hast, kannst du es ignorieren.
                  ButtonText: Passwort zurücksetzen
                - MessageTextType: VerifyEmail
                  Language: de
                  Title: Unique - Email verifizieren
                  PreHeader: Email verifizieren
                  Subject: Email verifizieren
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Eine neue E-Mail Adresse wurde hinzugefügt. Bitte verwende den untenstehenden Button um diese zu verifizieren &lt;br&gt;(Code &lt;strong&gt;{{ "{{" }}.Code{{ "}}" }}&lt;/strong&gt;).&lt;br&gt; Falls du deine E-Mail Adresse nicht selber hinzugefügt hast, kannst du dieses E-Mail ignorieren.
                  ButtonText: Email verifizieren
                - MessageTextType: VerifyPhone
                  Language: de
                  Title: Unique - Telefonnummer verifizieren
                  PreHeader: Telefonnummer verifizieren
                  Subject: Telefonnummer verifizieren
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Eine Telefonnummer wurde hinzugefügt. Bitte verifiziere diese in dem du folgenden Code eingibst (Code {{ "{{" }}.Code{{ "}}" }})
                  ButtonText: Telefon verifizieren
                - MessageTextType: DomainClaimed
                  Language: de
                  Title: Unique - Domain wurde beansprucht
                  PreHeader: Email / Username ändern
                  Subject: Domain wurde beansprucht
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Die Domain {{ "{{" }}.Domain{{ "}}" }} wurde von einer Organisation beansprucht. Dein derzeitiger User {{ "{{" }}.Username{{ "}}" }} ist nicht Teil dieser Organisation. Daher musst du beim nächsten Login eine neue Email hinterlegen. Für diesen Login haben wir dir einen temporären Usernamen ({{ "{{" }}.TempUsername{{ "}}" }}) erstellt.
                  ButtonText: Login
                - MessageTextType: PasswordChange
                  Language: de
                  Title: Unique - Passwort von Benutzer wurde geändert
                  PreHeader: Passwort Änderung
                  Subject: Passwort von Benutzer wurde geändert
                  Greeting: Hallo {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: Das Password vom Benutzer wurde geändert. Wenn diese Änderung von jemand anderem gemacht wurde, empfehlen wir die sofortige Zurücksetzung ihres Passworts.
                  ButtonText: Login
                - MessageTextType: InitCode
                  Language: en
                  Title: Unique - Initialize User
                  PreHeader: Initialize User
                  Subject: Initialize User
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: This user was created in Unique. Use the username {{ "{{" }}.PreferredLoginName{{ "}}" }} to login. Please click the button below to finish the initialization process. (Code {{ "{{" }}.Code{{ "}}" }}) If you didn't ask for this mail, please ignore it.
                  ButtonText: Finish initialization
                - MessageTextType: PasswordReset
                  Language: en
                  Title: Unique - Reset password
                  PreHeader: Reset password
                  Subject: Reset password
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: We received a password reset request. Please use the button below to reset your password. (Code {{ "{{" }}.Code{{ "}}" }}) If you didn't ask for this mail, please ignore it.
                  ButtonText: Reset password
                - MessageTextType: VerifyEmail
                  Language: en
                  Title: Unique - Verify email
                  PreHeader: Verify email
                  Subject: Verify email
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: A new email has been added. Please use the button below to verify your mail. (Code {{ "{{" }}.Code{{ "}}" }}) If you din't add a new email, please ignore this email.
                  ButtonText: Verify email
                - MessageTextType: VerifyPhone
                  Language: en
                  Title: Unique - Verify phone
                  PreHeader: Verify phone
                  Subject: Verify phone
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: A new phonenumber has been added. Please use the following code to verify it {{ "{{" }}.Code{{ "}}" }}.
                  ButtonText: Verify phone
                - MessageTextType: DomainClaimed
                  Language: en
                  Title: Unique - Domain has been claimed
                  PreHeader: Change email / username
                  Subject: Domain has been claimed
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: The domain {{ "{{" }}.Domain{{ "}}" }} has been claimed by an organisation. Your current user {{ "{{" }}.UserName{{ "}}" }} is not part of this organisation. Therefore you'll have to change your email when you login. We have created a temporary username ({{ "{{" }}.TempUsername{{ "}}" }}) for this login.
                  ButtonText: Login
                - MessageTextType: PasswordChange
                  Language: en
                  Title: Unique - Password of user has changed
                  PreHeader: Change password
                  Subject: Password of user has changed
                  Greeting: Hello {{ "{{" }}.DisplayName{{ "}}" }},
                  Text: The password of your user has changed. If this change was not done by you, please be advised to immediately reset your password.
                  ButtonText: Login
            FirstInstance:
              InstanceName: UNIQUE
              DefaultLanguage: en
              DomainPolicy:
                UserLoginMustBeDomain: false
                ValidateOrgDomain: false
              LoginPolicy:
                AllowUsernamePassword: true
                AllowDomainDiscovery: false
                AllowRegister: false
                AllowExternalIDP: {{ .Values.zitadel | get "defaultInstance.loginPolicy.allowExternalIdp" false }}
                IgnoreUnknownUsernames: true
              Org:
                Name: Cluster IAM
                Human:
                  Username: root@cluster-iam.localhost
                  Password: "RootPassword1!" # must be changed on first login so not a problem